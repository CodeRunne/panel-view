{"version":3,"file":"static/js/697.d22e07bd.chunk.js","mappings":"0PAGaA,E,QAAiBC,GAAAA,KAAW,wF,SCkEzC,IAAMC,GAAqBC,EAAAA,EAAAA,IAAyB,CACnDC,OAAQC,EAAAA,GACRC,aAAcC,EAAAA,KAOf,GAAeC,EAAAA,EAAAA,IAAQN,GAJI,SAAAO,GAAQ,MAAK,CACvCC,YAAa,SAAAC,GAAE,OAAIF,GAASG,EAAAA,EAAAA,IAAeD,GAAI,EAC/C,GAED,EApEA,SAAoB,GAAwC,IAgBvDE,EAhBiBH,EAAW,EAAXA,YAAaN,EAAM,EAANA,OAAQE,EAAY,EAAZA,aACnBK,GAAQG,EAAAA,EAAAA,YAAWC,EAAAA,GAAlCC,YAAeL,GACvB,GAAsCM,EAAAA,EAAAA,WAAS,GAAM,eAA9CC,EAAW,KAAEC,EAAc,KAgBlC,IAdAC,EAAAA,EAAAA,YAAU,WAOT,OALAV,EAAYC,GAGZU,YAAW,kBAAMF,GAAe,EAAK,GAAE,KAEhC,WACNA,GAAe,EAChB,CACD,GAAG,CAACT,EAAaC,IAIG,YAAjBL,EACFO,GAAW,2CACP,GAAGT,EAAOkB,QAA2B,YAAjBhB,EAA4B,CAGpDO,GACC,UAACb,EAAc,CAACuB,UAAU,kBAAiB,WAC1C,SAAC,KAAmB,CACnBC,KAAK,SACLC,WAAW,kBAEZ,SAAC,KAAK,CAACC,UARe,CAAC,KAAM,WAAY,WAAY,OAAQ,SAAU,WAAY,SAAU,gBAQ3D,SACxBtB,EAAOuB,KAAI,SAAAC,GAAK,OAAI,SAAC,MAAS,UAAqBA,GAAV,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOjB,GAAiB,QAIzE,MACCE,GAAY,SAAC,KAAU,IAMxB,OACC,iCAEU,SAAC,KAAG,CACAgB,MAAM,SACNC,YAAY,SACZN,KAAK,aAIlB,SAAC,KAAO,CAACO,MAAO,CAAEC,UAAWd,EAAc,OAAS,OAGnDL,IAGJ,G","sources":["pages/dashboard/view-orders/view-orders.styles.js","pages/dashboard/view-orders/view-orders.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\n\r\nexport const OrderContainer = styled.main`\r\n\tmargin-top: 3rem;\r\n\tmargin-bottom: 2rem;\r\n\tpadding: .4rem;\r\n`;","import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AuthContext } from '../../../providers/auth-provider/auth-provider';\r\nimport { fetchAllOrders } from '../../../redux/orders/orders.actions';\r\nimport { selectAllOrders, selectOrderRequestStatus } from '../../../redux/orders/orders.selectors';\r\nimport { Alert, Profile, EmptySlate, SEO, FilterFormContainer, Table, OrdersRow } from '../../../components';\r\nimport { OrderContainer } from './view-orders.styles';\r\n\r\nfunction ViewOrders({ fetchOrders, orders, ordersStatus }) {\r\n\tconst { currentUser: { id }} = useContext(AuthContext);\r\n\tconst [alertIsOpen, setAlertIsOpen] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Fetch All orders\r\n\t\tfetchOrders(id);\r\n\r\n\t\t// Display Alert\r\n\t\tsetTimeout(() => setAlertIsOpen(true), 2000);\r\n\r\n\t\treturn () => {\r\n\t\t\tsetAlertIsOpen(false);\r\n\t\t}\r\n\t}, [fetchOrders, id]);\r\n\r\n\tlet content;\r\n\r\n\tif(ordersStatus === \"pending\") \r\n\t\tcontent = (<p>Loading...</p>);\r\n\telse if(orders.length && ordersStatus === \"success\") {\r\n\t\tconst ordersTableHead = [\"ID\", \"category\", \"services\", \"link\", \"status\", \"quantity\", \"charge\", \"average time\"];\r\n\r\n\t\tcontent = (\r\n\t\t\t<OrderContainer className=\"order-container\">\r\n\t\t\t\t<FilterFormContainer \r\n\t\t\t\t\ttype=\"orders\"\r\n\t\t\t\t\tfilterName=\"Show filters\" />\r\n\r\n\t\t\t\t<Table tableHead={ordersTableHead}>\r\n\t\t           {orders.map(order => <OrdersRow key={order?.id} {...order} />)}\r\n\t\t        </Table>\r\n\t\t\t</OrderContainer>\r\n\t\t);\r\n\t} else \r\n\t\tcontent = ( <EmptySlate /> );\r\n\r\n\t\t\t// {/* Alert */}\r\n\t\t\t// {alertIsOpen && <Alert isOpen={alertIsOpen} setIsOpen={setAlertIsOpen}>\r\n\t\t\t// \t<span className=\"font-bold\">Need support to check an order?</span> Order support is done only through tickets <Link className=\"gradient-text\" to=\"/dashboard/ticket-support\">Click here to send new ticket</Link>\r\n\t\t\t// </Alert>}\r\n\treturn (\r\n\t\t<>\t\r\n\t\t\t{/* SEO */}\r\n            <SEO\r\n                title=\"Orders\"\r\n                description=\"Orders\"\r\n                type=\"article\"\r\n            />\r\n\r\n\t\t\t{/* User Profile */}\r\n\t\t\t<Profile style={{ marginTop: alertIsOpen ? '2rem' : '0' }} />\r\n\r\n\t\t\t{/* Orders Content */}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst mapStateToDispatch = createStructuredSelector({\r\n\torders: selectAllOrders,\r\n\tordersStatus: selectOrderRequestStatus\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tfetchOrders: id => dispatch(fetchAllOrders(id))\r\n});\r\n\r\nexport default connect(mapStateToDispatch, mapDispatchToProps)(ViewOrders);"],"names":["OrderContainer","styled","mapStateToDispatch","createStructuredSelector","orders","selectAllOrders","ordersStatus","selectOrderRequestStatus","connect","dispatch","fetchOrders","id","fetchAllOrders","content","useContext","AuthContext","currentUser","useState","alertIsOpen","setAlertIsOpen","useEffect","setTimeout","length","className","type","filterName","tableHead","map","order","title","description","style","marginTop"],"sourceRoot":""}